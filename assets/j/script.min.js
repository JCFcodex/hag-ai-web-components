const copyCode = async (event) => {
  const codeBlock = event.target.closest('.code-block').querySelector('pre');
  if (codeBlock) {
    try {
      await navigator.clipboard.writeText(codeBlock.textContent.trim());
      Swal.fire({
        title: 'Success!',
        text: 'Code copied to clipboard!',
        icon: 'success',
        confirmButtonText: 'OK',
      });
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  } else {
    console.error('No <pre> element found to copy.');
  }
};

window.addEventListener('load', async () => {
  const form = document.getElementById('message-form');
  const formContainer = document.getElementById('form-container');
  const messageInputContainer = document.getElementById(
    'message-input-container'
  );
  const messageInput = document.getElementById('message-input');
  const messagesContainer = document.getElementById('messages-container');
  const messages = document.getElementById('messages');
  const sendBtn = document.querySelector('.send-btn');
  const sendBtnIcon = sendBtn.querySelector('i');
  const deleteBtn = document.getElementById('delete-messages');
  const loadingScreen = document.getElementById('loading-screen');
  const version = document.getElementById('ai-version');
  const loadMoreLoading = document.getElementById('loadMoreLoading');
  const loadMoreButton = document.getElementById('loadMoreButton');
  const formButtons = document.querySelectorAll('.btns button');
  const imageInput = document.getElementById('image-input');
  const uploadImageButton = document.getElementById('upload-image');
  const imgsDiv = document.querySelector('.imgs');
  let selectedImage = null;
  let isLoading = false;
  let offset = 0;
  const limit = 4;
  let noMoreMessages = false;
  let loadCount = 0;
  const maxAutoLoads = 3;
  const scrollThreshold = 0;
  let checkScrollFrameId;
  let lastCheckTime = 0;
  const checkInterval = 1000;
  let overlay;
  let autoScrollEnabled = true;
  let lastScrollTop = 0;
  let hagAiLogo = null;
  let lastHeight = messagesContainer.scrollHeight;

  const blobCache = new Map();

  const base64ToBlob = (base64, contentType = 'image/*') => {
    try {
      if (!/^[A-Za-z0-9+/=]+$/.test(base64)) {
        throw new Error('Invalid Base64 string');
      }

      const byteCharacters = atob(base64);
      const byteArrays = [];

      for (let offset = 0; offset < byteCharacters.length; offset += 512) {
        const slice = byteCharacters.slice(offset, offset + 512);
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
          byteNumbers[i] = slice.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
      }

      return new Blob(byteArrays, { type: contentType });
    } catch (error) {
      console.error('Error converting Base64 to Blob:', error);
      return null;
    }
  };

  const getBlobUrl = (base64) => {
    if (blobCache.has(base64)) {
      return blobCache.get(base64);
    }

    const blob = base64ToBlob(base64);
    if (!blob) return null;

    const blobUrl = URL.createObjectURL(blob);
    blobCache.set(base64, blobUrl);

    return blobUrl;
  };
  const revokeBlobUrls = () => {
    blobCache.forEach((url, key) => {
      try {
        URL.revokeObjectURL(url);
        console.log(`Revoked URL for key: ${key}`);
      } catch (error) {
        console.error(`Error revoking URL for key: ${key}`, error);
      }
    });
    blobCache.clear();
  };

  const loadImageAsBlob = async (url) => {
    const response = await fetch(url);
    const blob = await response.blob();
    return URL.createObjectURL(blob);
  };

  hagAiLogo = await loadImageAsBlob('./assets/hag-ai-logo.png');

  const fetchCurrentVersion = async () => {
    try {
      const response = await fetch('/version', {
        method: 'GET',
        credentials: 'include',
      });
      if (!response.ok)
        throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();
      version.textContent = data.version
        ? `Hag AI - v${data.version}`
        : 'Version not found';
    } catch (error) {
      console.error('Error fetching version:', error);
      version.textContent = 'Error loading version';
    }
  };

  const getRandomPrompts = (prompts, count) =>
    prompts.sort(() => 0.5 - Math.random()).slice(0, count);

  const getCategory = (prompt) => {
    const category =
      preSuggestPrompts.find((p) => p.text === prompt)?.category || 'default';
    return category;
  };

  const addPreSuggestPrompts = () => {
    let existingSuggestionsDiv = document.getElementById(
      'pre-suggest-container'
    );

    if (
      existingSuggestionsDiv &&
      existingSuggestionsDiv.style.display !== 'none'
    )
      return;

    if (!existingSuggestionsDiv) {
      const suggestionsDiv = document.createElement('div');
      suggestionsDiv.className = 'pre-suggest-container';
      suggestionsDiv.id = 'pre-suggest-container';
      suggestionsDiv.style.display = 'flex';
      suggestionsDiv.style.flexDirection = 'column';
      suggestionsDiv.style.alignItems = 'center';

      const logoDescContainer = document.createElement('div');
      logoDescContainer.className = 'logo-desc-container';
      logoDescContainer.style.textAlign = 'center';

      const logoDiv = document.createElement('div');
      logoDiv.className = 'pre-suggest-logo';

      const logoImg = document.createElement('img');
      logoImg.src = hagAiLogo;
      logoImg.alt = 'Logo';
      logoImg.setAttribute('loading', 'lazy');
      logoImg.style.width = '75px';
      logoImg.style.height = '75px';

      logoDiv.appendChild(logoImg);
      logoDescContainer.appendChild(logoDiv);

      const titleH1 = document.createElement('h1');
      titleH1.textContent = 'Hag AI';

      const descriptionP = document.createElement('p');
      descriptionP.id = 'description-p';

      logoDescContainer.appendChild(titleH1);
      logoDescContainer.appendChild(descriptionP);

      suggestionsDiv.appendChild(logoDescContainer);

      const promptsContainer = document.createElement('div');
      promptsContainer.className = 'prompts-container';

      const randomPrompts = getRandomPrompts(preSuggestPrompts, 3);
      randomPrompts.forEach(({ text: prompt }) => {
        const promptDiv = document.createElement('div');
        promptDiv.className = 'pre-suggest-prompt';

        const category = getCategory(prompt);
        const iconInfo = categories[category]
          ? categories[category][
              Math.floor(Math.random() * categories[category].length)
            ]
          : { class: 'fas fa-question', color: '#F44336' };

        const iconSpan = document.createElement('span');
        iconSpan.className = iconInfo.class;
        iconSpan.id = 'pre-suggest-icon';
        iconSpan.style.color = iconInfo.color;

        const textSpan = document.createElement('p');
        textSpan.textContent = prompt;

        promptDiv.appendChild(iconSpan);
        promptDiv.appendChild(textSpan);

        promptDiv.addEventListener('click', () => {
          sendPreSuggestPrompt(prompt);
          hidePreSuggestPrompt();
        });

        promptsContainer.appendChild(promptDiv);
      });

      suggestionsDiv.appendChild(promptsContainer);

      messages.appendChild(suggestionsDiv);

      logoImg.onload = () => {
        hideLoadingScreen();
        // scrollToBottom();
        scrollTo('#pre-suggest-container');
        const messages = [
          'Your AI companion for interactive conversations.',
          'Empowering creativity through AI technology.',
          'Explore ideas and solutions with your AI assistant.',
          'Your smart assistant for problem-solving.',
          'Navigating challenges with AI support.',
          'Unlocking creativity with AI.',
          'Bringing innovative AI ideas to life.',
          'Your trusted partner for intelligent insights.',
          'AI solutions tailored to your needs.',
          'Fueling creativity with AI-driven intelligence.',
          'Real-time problem solving with AI.',
          'Enhancing decision-making with AI.',
          'Your brainstorming buddy powered by AI!',
          'Smart solutions to complex problems with AI.',
          'Guiding you with intuitive AI conversations.',
          'AI-driven assistant for creative projects.',
          'Making technology work for your ideas with AI.',
          'Achieving your goals efficiently with AI.',
          'Innovate and explore new possibilities with AI.',
          'Reliable AI assistant for interactive discussions.',
        ];
        typeTextEffect(descriptionP, messages);
      };
    }
  };

  const typeTextEffect = (
    element,
    messages,
    speed = 50,
    eraseSpeed = 10,
    delay = 2000,
    repeatCount = Infinity,
    blink = true
  ) => {
    if (!messages || messages.length === 0) return;

    let index = 0;
    let messageIndex = 0;
    let isErasing = false;
    let currentRepeat = 0;

    const cursor = document.createElement('span');
    cursor.className = 'blinking-cursor';
    cursor.textContent = '|';
    if (blink) {
      element.appendChild(cursor);
    }

    const type = () => {
      const suggestionsDiv = document.getElementById('pre-suggest-container');

      if (!suggestionsDiv || suggestionsDiv.style.display === 'none') {
        return;
      }

      const currentMessage = messages[messageIndex];

      if (!isErasing && index < currentMessage.length) {
        element.textContent = currentMessage.substring(0, index + 1);
        element.appendChild(cursor);
        index++;
        setTimeout(type, speed);
      } else if (isErasing && index > 0) {
        element.textContent = currentMessage.substring(0, index - 1);
        element.appendChild(cursor);
        index--;
        setTimeout(type, eraseSpeed);
      } else {
        isErasing = !isErasing;
        if (!isErasing) {
          messageIndex = (messageIndex + 1) % messages.length;
          if (messageIndex === 0) {
            currentRepeat++;
            if (currentRepeat >= repeatCount) {
              return;
            }
          }
        }
        setTimeout(type, delay);
      }
    };

    type();
  };

  const hidePreSuggestPrompt = () => {
    const suggestionsDiv = document.getElementById('pre-suggest-container');
    if (suggestionsDiv) suggestionsDiv.style.display = 'none';
  };

  const removePreSuggestPrompt = () => {
    const suggestionsDiv = document.getElementById('pre-suggest-container');
    if (suggestionsDiv) suggestionsDiv.innerHTML = '';
  };

  const sendPreSuggestPrompt = (prompt) => {
    messageInput.value = prompt;
    form.dispatchEvent(new Event('submit'));
  };

  const hideLoadingScreen = () => {
    if (loadingScreen) {
      loadingScreen.classList.add('fade-out');
      loadingScreen.addEventListener(
        'transitionend',
        () => {
          loadingScreen.style.display = 'none';
        },
        { once: true }
      );
    }
  };

  const focusMessageInput = () => {
    if (document.activeElement !== messageInput) {
      messageInput.focus();
    }
  };
  const isScrollable = (element) => element.scrollHeight > element.clientHeight;

  const loadMessages = async () => {
    try {
      let messageCount = 0;

      const processBatch = async (messagesData) => {
        const fragment = document.createDocumentFragment();
        for (const { type, text, date, image } of messagesData) {
          const messageContent =
            type === 'ai' ? processMarkdown(text) : await escapeHTML(text);
          const messageDiv = await addMessage(
            type,
            messageContent,
            formatDate(date),
            image
          );
          messageDiv.style.transitionDelay = `${0.2 * messageCount}s`;
          messageCount += 1;
          fragment.prepend(messageDiv);
        }
        messages.prepend(fragment);
        // Prism.highlightAll();
      };

      while (!isScrollable(messagesContainer)) {
        const response = await fetch(
          `/messages?offset=${offset}&limit=${limit}`,
          {
            method: 'GET',
            credentials: 'include',
          }
        );
        const messagesData = await response.json();

        if (messagesData.length > 0) {
          await processBatch(messagesData);
        } else {
          noMoreMessages = true;
          addPreSuggestPrompts();
          break;
        }
      }
    } catch (error) {
      console.error('Failed to load messages:', error);
    } finally {
      addPreSuggestPrompts();
    }
  };

  const showLoadMoreMsgLoading = () => {
    loadMoreLoading.style.display = 'block';
  };

  const hideLoadMoreMsgLoading = () => {
    loadMoreLoading.style.display = 'none';
  };

  const showLoadMoreButton = () => {
    loadMoreButton.style.display = 'block';
    fadeIn(loadMoreButton);
  };

  const hideLoadMoreButton = () => {
    loadMoreButton.style.display = 'none';
  };

  const loadMoreMessages = async () => {
    if (loadCount >= maxAutoLoads) return hideLoadMoreMsgLoading();

    showLoadMoreMsgLoading();

    try {
      const response = await fetch(`/messages?offset=${offset}&limit=2`, {
        method: 'GET',
        credentials: 'include',
      });
      const messagesData = await response.json();
      let messageCount = 0;

      if (messagesData.length > 0) {
        const fragment = document.createDocumentFragment();

        await Promise.all(
          messagesData.map(async ({ type, text, date, image }) => {
            const messageContent =
              type === 'ai' ? processMarkdown(text) : await escapeHTML(text);
            const messageDiv = await addMessage(
              type,
              messageContent,
              formatDate(date),
              image
            );
            messageDiv.style.transitionDelay = `${0.2 * messageCount}s`;
            messageCount += 1;
            fragment.prepend(messageDiv);
          })
        );

        messages.prepend(fragment);

        // messagesContainer.scrollTo({
        //   top: 0,
        //   behavior: 'smooth',
        //   block: 'start',
        // });

        autoScroll('t');

        // Prism.highlightAll();
      } else {
        noMoreMessages = true;
        hideLoadMoreMsgLoading();
        hideLoadMoreButton();
        return;
      }

      loadCount++;
      if (loadCount >= maxAutoLoads) {
        hideLoadMoreMsgLoading();
        showLoadMoreButton();
      }
    } catch (error) {
      console.error('Failed to load messages:', error);
    } finally {
      if (loadCount < maxAutoLoads) {
        // hideLoadMoreMsgLoading();
      }
    }
  };

  const loadMoreButtonClickHandler = async () => {
    if (!isLoading && !noMoreMessages) {
      setLoadingState(true);
      await loadMoreMessages();
      setLoadingState(false);
      loadCount = 0;
      hideLoadMoreButton();
    }
  };

  const handleScroll = async () => {
    if (
      messagesContainer.scrollTop <= scrollThreshold &&
      !isLoading &&
      !noMoreMessages
    ) {
      setLoadingState(true);
      await loadMoreMessages();
      setLoadingState(false);

      checkScrollPosition();
    }
  };

  const checkScrollPosition = () => {
    const now = Date.now();

    if (checkScrollFrameId) {
      cancelAnimationFrame(checkScrollFrameId);
    }

    checkScrollFrameId = requestAnimationFrame(() => {
      if (now - lastCheckTime >= checkInterval) {
        lastCheckTime = now;
        if (
          messagesContainer.scrollTop <= scrollThreshold &&
          !isLoading &&
          !noMoreMessages
        ) {
          handleScroll();
        }
      } else {
        checkScrollPosition();
      }
    });
  };

  const deleteMessages = async (e) => {
    e.preventDefault();
    const hasMessages = messages.querySelector('.message') !== null;

    if (isLoading) return;

    setLoadingState(true);

    if (!hasMessages) {
      Swal.fire({
        title: 'No Messages',
        text: 'There are no messages to delete.',
        icon: 'info',
        confirmButtonText: 'OK',
      }).then(() => {
        setLoadingState(false);
      });
      return;
    }

    try {
      const { isConfirmed } = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to delete all messages?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
      });

      if (isConfirmed) {
        removePreSuggestPrompt();
        const response = await fetch('/messages', {
          method: 'DELETE',
          credentials: 'include',
        });
        if (!response.ok) throw new Error('Network response was not ok');
        const result = await response.json();
        if (result.message) {
          messages.innerHTML = '';
          revokeBlobUrls();
          addPreSuggestPrompts();
        }
      }
    } catch (error) {
      console.error('Failed to delete messages:', error);
    } finally {
      setLoadingState(false);
    }
  };

  uploadImageButton.addEventListener('click', (event) => {
    event.preventDefault();
    if (!isLoading) imageInput.click();
  });

  imageInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        Swal.fire({
          title: 'Error!',
          text: 'Invalid file type. Please upload an image.',
          icon: 'error',
          confirmButtonText: 'OK',
        });
        imageInput.value = '';
        return;
      }

      selectedImage = file;
      const reader = new FileReader();
      reader.onload = (e) => {
        const imgElement = document.createElement('img');
        const blob = base64ToBlob(e.target.result.split(',')[1]);
        if (blob) {
          const blobUrl = URL.createObjectURL(blob);
          imgElement.src = blobUrl;
          imgElement.className = 'uploaded-image';
          imgElement.setAttribute('loading', 'lazy');

          const removeButton = document.createElement('button');
          removeButton.innerHTML = '<i class="fas fa-times"></i>';
          removeButton.className = 'remove-image-button';

          const imgContainer = document.createElement('div');
          imgContainer.className = 'image-container';
          imgContainer.appendChild(imgElement);
          imgContainer.appendChild(removeButton);

          imgsDiv.innerHTML = '';
          imgsDiv.appendChild(imgContainer);

          removeButton.addEventListener('click', () => {
            selectedImage = null;
            imageInput.value = '';
            imgsDiv.innerHTML = '';
          });
        }
      };
      reader.readAsDataURL(file);
    }
  });

  messageInput.addEventListener('paste', async (event) => {
    const items = event.clipboardData.items;
    for (const item of items) {
      if (item.type.startsWith('image/')) {
        const file = item.getAsFile();
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            const imgElement = document.createElement('img');
            const blob = base64ToBlob(e.target.result.split(',')[1]);
            if (blob) {
              const blobUrl = URL.createObjectURL(blob);
              imgElement.src = blobUrl;
              imgElement.className = 'uploaded-image';
              imgElement.setAttribute('loading', 'lazy');

              const removeButton = document.createElement('button');
              removeButton.innerHTML = '<i class="fas fa-times"></i>';
              removeButton.className = 'remove-image-button';

              const imgContainer = document.createElement('div');
              imgContainer.style.display = 'inline-block';
              imgContainer.className = 'image-container';
              imgContainer.appendChild(imgElement);
              imgContainer.appendChild(removeButton);

              imgsDiv.innerHTML = '';
              imgsDiv.appendChild(imgContainer);

              removeButton.addEventListener('click', () => {
                selectedImage = null;
                imgsDiv.innerHTML = '';
              });

              selectedImage = file;
            }
          };
          reader.readAsDataURL(file);
          return;
        }
      }
    }
  });

  const fileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64String = reader.result.split(',')[1];
        resolve(base64String);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  const processMarkdown = (markdown) => {
    try {
      const html = marked.parse(markdown.trim());
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html.trim();

      addCopyButtons(tempDiv);

      return tempDiv.innerHTML;
    } catch (error) {
      console.error('Error processing markdown:', error);
      return `<p>Error processing markdown: ${error.message}</p>`;
    }
  };

  const addCopyButtons = (container) => {
    container.querySelectorAll('pre').forEach((pre) => {
      const parentDiv = document.createElement('div');
      parentDiv.className = 'code-block';
      const copyButton = document.createElement('button');
      copyButton.className = 'copy-btn';
      copyButton.setAttribute('onclick', 'copyCode(event)');
      copyButton.innerHTML = '<i class="fa-regular fa-clone"></i>';
      parentDiv.appendChild(copyButton);

      pre.parentNode.insertBefore(parentDiv, pre);
      parentDiv.appendChild(pre);
    });
  };

  const escapeHTML = (str) => {
    return str
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  };

  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    const message = messageInput.value.trim();
    if (isLoading || (!message && !selectedImage)) return;

    if (message.length > 8192) {
      Swal.fire({
        title: 'Error!',
        text: 'Message exceeds the maximum length of 8192 characters.',
        icon: 'error',
        confirmButtonText: 'OK',
      });
      return;
    }

    setLoadingState(true);
    hidePreSuggestPrompt();
    resetMessageInput();

    const processedUserMessage = escapeHTML(message);
    const imageBase64 = selectedImage
      ? await fileToBase64(selectedImage)
      : null;

    await addMessage(
      'user',
      processedUserMessage || '',
      formatDate(new Date().toISOString()),
      imageBase64
    );

    imgsDiv.innerHTML = '';
    resetMessageInput();

    const aiMessageDiv = await addMessage(
      'ai',
      `<div class="loading"><div class="dot"></div><div class="dot"></div><div class="dot"></div></div>`,
      formatDate(new Date().toISOString())
    );

    scrollToBottom();

    const formData = new FormData();
    if (message) formData.append('message', message);
    if (selectedImage) formData.append('image', selectedImage);

    const abortController = new AbortController();
    const timeoutId = setTimeout(() => abortController.abort(), 30000);

    try {
      const response = await fetch('/send', {
        method: 'POST',
        body: formData,
        signal: abortController.signal,
        credentials: 'include',
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.json();
        Swal.fire({
          title: 'Error!',
          text: errorData.reply || 'Error occurred',
          icon: 'error',
          confirmButtonText: 'OK',
        });
        aiMessageDiv.querySelector('.message-content').innerHTML = `<p>${
          errorData.reply || 'Error occurred'
        }</p>`;
        selectedImage = null;
        imageInput.value = '';
        finalizeLoadingState();
        return;
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let buffer = '';

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        buffer += decoder.decode(value, { stream: true });

        let newlineIndex;
        while ((newlineIndex = buffer.indexOf('\n')) !== -1) {
          const chunk = buffer.slice(0, newlineIndex);
          buffer = buffer.slice(newlineIndex + 1);

          try {
            const parsedChunk = JSON.parse(chunk);

            if (parsedChunk.chunk) {
              requestAnimationFrame(async () => {
                const messageContent =
                  aiMessageDiv.querySelector('.message-content');
                messageContent.innerHTML = processMarkdown(parsedChunk.chunk);
                // Prism.highlightAll();
                await hljs.highlightAll();
                autoScroll('b');
              });
            }

            if (parsedChunk.complete) {
              // Prism.highlightAll();
              finalizeLoadingState();
              break;
            }
          } catch (error) {
            console.error('Error parsing JSON chunk:', error.message);
            Swal.fire({
              title: 'Error!',
              text: 'Received unexpected response format from server.',
              icon: 'error',
              confirmButtonText: 'OK',
            });
            break;
          }
        }
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        Swal.fire({
          title: 'Error!',
          text: 'Request timed out. Please try again.',
          icon: 'error',
          confirmButtonText: 'OK',
        });
      } else {
        handleError(aiMessageDiv, error);
        Swal.fire({
          title: 'Error!',
          text: 'An error occurred while sending your message. Please try again.',
          icon: 'error',
          confirmButtonText: 'OK',
        });
      }
    } finally {
      selectedImage = null;
      imageInput.value = '';
      setLoadingState(false);
    }
  });

  const setLoadingState = (state) => {
    isLoading = state;
    sendBtn.disabled = state;

    if (state) {
      sendBtnIcon.classList.remove('fa-solid', 'fa-chevron-right');
      sendBtnIcon.classList.add('fa-regular', 'fa-circle', 'fa-fade');
    } else {
      sendBtnIcon.classList.remove('fa-regular', 'fa-circle', 'fa-fade');
      sendBtnIcon.classList.add('fa-solid', 'fa-chevron-right');
    }
  };
  const resetMessageInput = () => {
    messageInput.value = '';
    messageInput.style.height = 'auto';
    adjustHeight();
  };

  const finalizeLoadingState = () => {
    scrollToBottom();
    setLoadingState(false);
  };

  const handleError = (aiMessageDiv, errorMessage) => {
    console.error(`Error fetching response: ${errorMessage}`);
    aiMessageDiv.querySelector(
      '.message-content'
    ).innerHTML = `<p>Error fetching response: ${errorMessage}</p>`;
    setLoadingState(false);
  };

  const fadeIn = (element) => {
    let opacity = 0;
    element.style.opacity = opacity;
    element.style.transition = 'opacity 0.5s';

    const step = () => {
      opacity += 0.05;
      element.style.opacity = opacity;
      if (opacity < 1) {
        requestAnimationFrame(step);
      }
    };

    requestAnimationFrame(step);
  };

  const addMessage = async (type, text, date, image = null) => {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;

    const aiLogo =
      type === 'ai'
        ? `<div class="ai-logo-container"><img loading="lazy" src=${hagAiLogo} alt="AI Logo" class="ai-logo" width="32"/></div>`
        : '';

    let contentHTML = text;
    if (image) {
      const blobUrl = getBlobUrl(image);
      if (blobUrl) {
        contentHTML += `<div class="message-image-container"><img loading="lazy" src="${blobUrl}" alt="User Image" class="message-image"/></div>`;
      }
    }

    messageDiv.innerHTML = `${aiLogo}<div class="message-content" title="${
      date || ''
    }">${contentHTML}</div>`;

    if (!overlay) {
      overlay = document.createElement('div');
      overlay.className = 'fullscreen-overlay';
      document.body.appendChild(overlay);

      overlay.addEventListener('click', () => {
        overlay.classList.remove('active');
        overlay.innerHTML = '';
      });
    }

    const images = messageDiv.querySelectorAll('.message-image');
    images.forEach((img) => {
      img.addEventListener('click', () => {
        overlay.innerHTML = `<img loading="lazy" src="${img.src}" alt="Full-Screen Image"/>`;
        overlay.classList.add('active');
      });
    });

    const intersectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('show');
            // intersectionObserver.unobserve(entry.target);
          } else {
            entry.target.classList.remove('show');
          }
        });
      },
      { threshold: 0.01, rootMargin: '0px 0px -10% 0px' }
    );

    intersectionObserver.observe(messageDiv);
    offset += 1;
    messages.appendChild(messageDiv);
    if (type === 'ai') hljs.highlightAll();

    return messageDiv;
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const optionsDate = { year: 'numeric', month: 'short', day: '2-digit' };
    const optionsTime = { hour: 'numeric', minute: '2-digit', hour12: true };
    const formattedDate = new Intl.DateTimeFormat('en-US', optionsDate).format(
      date
    );
    const formattedTime = new Intl.DateTimeFormat('en-US', optionsTime)
      .format(date)
      .replace(/^0/, '');
    return `${formattedDate} | ${formattedTime.toLowerCase()}`;
  };

  const scrollTo = (element) => {
    document.querySelector(element).scrollIntoView({
      behavior: 'smooth',
    });
  };

  const scrollToBottom = () => {
    messagesContainer.scrollTo({
      top: messagesContainer.scrollHeight,
      block: 'end',
      behavior: 'smooth',
    });
  };

  const autoScroll = (direction) => {
    if (!autoScrollEnabled) return;

    const { scrollHeight, scrollTop, clientHeight } = messagesContainer;
    const buffer = 100;

    if (scrollHeight !== lastHeight) {
      window.requestAnimationFrame(() => {
        if (
          direction === 'b' &&
          scrollHeight - scrollTop - clientHeight < buffer
        ) {
          messagesContainer.scrollTo({
            top: scrollHeight,
            behavior: 'smooth',
          });
          lastScrollTop = scrollHeight;
        } else if (direction === 't' && scrollTop < buffer) {
          messagesContainer.scrollTo({
            top: 0,
            behavior: 'smooth',
          });
          lastScrollTop = 0;
        }
        lastHeight = scrollHeight;
      });
    }
  };

  const debounce = (func, wait) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  };

  const handleAutoScroll = debounce(() => {
    const { scrollHeight, scrollTop, clientHeight } = messagesContainer;
    const buffer = 100;

    const distanceFromBottom = scrollHeight - scrollTop - clientHeight;

    if (distanceFromBottom > buffer) {
      autoScrollEnabled = false;
    } else {
      autoScrollEnabled = true;
      lastScrollTop = scrollHeight;
    }
  }, 100);

  messagesContainer.addEventListener('scroll', handleAutoScroll);

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          if (!noMoreMessages) {
            autoScrollEnabled = true;
            autoScroll('b');
          }
        }
      });
    },
    {
      root: messagesContainer,
      threshold: 1.0,
    }
  );

  observer.observe(messagesContainer.lastElementChild);

  const handleImageLoad = (img) => {
    img.style.opacity = '0';
    img.addEventListener('load', () => {
      img.style.opacity = '1';
    });
  };

  document.querySelectorAll('img').forEach(handleImageLoad);

  const imgObserver = new MutationObserver((mutationsList) => {
    mutationsList.forEach((mutation) => {
      mutation.addedNodes.forEach((node) => {
        if (node.tagName === 'IMG') {
          handleImageLoad(node);
        }
        if (node.querySelectorAll) {
          node.querySelectorAll('img').forEach(handleImageLoad);
        }
      });
    });
  });

  imgObserver.observe(document.body, { childList: true, subtree: true });

  const isMobileDevice = () => /Mobi|Android/i.test(navigator.userAgent);

  const adjustHeight = () => {
    const scrollHeight = messageInput.scrollHeight;
    messageInput.style.height = 'auto';
    messageInputContainer.style.height = 'auto';
    messageInput.style.height = `${scrollHeight}px`;
    messageInputContainer.style.height = `${scrollHeight}px`;
  };

  if (!isMobileDevice()) {
    messageInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        form.dispatchEvent(new Event('submit'));
      }
    });
  }

  formButtons.forEach((button) => {
    let tooltipTimeout;

    const setButtonActive = () => {
      button.style.backgroundColor = '#212129';
      tooltipTimeout = setTimeout(
        () => button.classList.add('show-tooltip'),
        1000
      );
    };

    const resetButton = () => {
      clearTimeout(tooltipTimeout);
      button.classList.remove('show-tooltip');
      button.style.backgroundColor = 'transparent';
    };

    const eventHandlers = isMobileDevice()
      ? {
          start: 'touchstart',
          end: 'touchend',
          move: 'touchmove',
          cancel: 'touchcancel',
        }
      : {
          start: 'mouseenter',
          end: 'mouseleave',
        };

    button.addEventListener(eventHandlers.start, setButtonActive);
    button.addEventListener(eventHandlers.end, resetButton);

    if (isMobileDevice()) {
      button.addEventListener(eventHandlers.move, resetButton);
      button.addEventListener(eventHandlers.cancel, resetButton);
    }
  });

  document.addEventListener('keydown', (e) => {
    if (
      e.key === '/' &&
      !isMobileDevice() &&
      document.activeElement !== messageInput
    ) {
      e.preventDefault();
      messageInput.focus();
    }
  });
  loadMoreButton.addEventListener('click', loadMoreButtonClickHandler);
  messageInput.addEventListener('input', () => {
    messageInput.style.height = 'auto';
    adjustHeight();
  });
  messageInput.addEventListener('focus', () =>
    formContainer.classList.add('focused')
  );
  messageInput.addEventListener('blur', () =>
    formContainer.classList.remove('focused')
  );
  formContainer.addEventListener('click', focusMessageInput);
  messagesContainer.addEventListener('scroll', checkScrollPosition);
  deleteBtn.addEventListener('click', deleteMessages);

  fetchCurrentVersion();
  loadMessages();
  focusMessageInput();
  adjustHeight();
  revokeBlobUrls();
});

const preSuggestPrompts = [
  // Tech
  { text: 'Suggest 10 capstone project titles.', category: 'tech' },
  {
    text: 'Give me a brief overview of blockchain technology.',
    category: 'tech',
  },
  {
    text: 'What are the latest advancements in renewable energy?',
    category: 'tech',
  },
  {
    text: 'Explain the significance of data privacy in the digital age.',
    category: 'tech',
  },
  {
    text: 'What are some emerging technologies to watch out for?',
    category: 'tech',
  },

  // Development
  {
    text: 'What are the latest trends in web development?',
    category: 'development',
  },
  {
    text: 'What are some best practices for code documentation?',
    category: 'development',
  },
  {
    text: 'What are the key elements of a successful project plan?',
    category: 'development',
  },
  {
    text: 'What are the advantages of using Git for version control?',
    category: 'development',
  },
  {
    text: 'Describe the role of UX/UI design in web development.',
    category: 'development',
  },

  // Story
  { text: 'Create a short story about a space adventure.', category: 'story' },
  { text: 'Write a poem about a rainy day.', category: 'story' },
  {
    text: 'Create a dialogue between a detective and a suspect in a mystery story.',
    category: 'story',
  },
  { text: 'Write a letter to your future self.', category: 'story' },
  { text: 'Write a short story about an unexpected hero.', category: 'story' },

  // Trivia
  { text: 'Tell me a joke.', category: 'trivia' },
  { text: 'Tell me an interesting fact about history.', category: 'trivia' },
  { text: 'Tell me a fun fact about space exploration.', category: 'trivia' },
  {
    text: 'Tell me about a groundbreaking scientific discovery.',
    category: 'trivia',
  },
  { text: 'Tell me a riddle.', category: 'trivia' },

  // Questions
  { text: 'How does AI work?', category: 'questions' },
  { text: 'Explain quantum computing in simple terms.', category: 'questions' },
  {
    text: 'What are the benefits of learning a second language?',
    category: 'questions',
  },
  { text: "Explain cloud computing in layman's terms.", category: 'questions' },
  {
    text: 'What are some effective strategies for problem-solving?',
    category: 'questions',
  },

  // Tips
  {
    text: 'Describe the process of making a pizza from scratch.',
    category: 'tips',
  },
  { text: 'How can I improve my public speaking skills?', category: 'tips' },
  { text: 'Share a tip for improving writing skills.', category: 'tips' },
  { text: 'Share a recipe for a quick and healthy meal.', category: 'tips' },
  {
    text: 'How can I stay motivated while working on long-term projects?',
    category: 'tips',
  },

  // Productivity
  {
    text: 'What are some tips for effective time management?',
    category: 'productivity',
  },
  { text: 'Share a useful productivity hack.', category: 'productivity' },
  {
    text: 'Share tips for effective team collaboration.',
    category: 'productivity',
  },
  {
    text: 'How can I build a strong personal brand?',
    category: 'productivity',
  },
  {
    text: 'What are some creative ways to reduce stress?',
    category: 'productivity',
  },

  // Inspiration
  { text: 'Share a motivational quote.', category: 'inspiration' },
  {
    text: 'Share an inspiring success story of a famous entrepreneur.',
    category: 'inspiration',
  },
  { text: 'Tell me a famous quote and its origin.', category: 'inspiration' },
  {
    text: 'What are the benefits of staying positive?',
    category: 'inspiration',
  },
  { text: 'Share a powerful life lesson.', category: 'inspiration' },

  // Learning
  {
    text: 'How can I start learning about artificial intelligence?',
    category: 'learning',
  },
  { text: 'Explain machine learning to a beginner.', category: 'learning' },
  {
    text: 'What are some must-read books for self-education?',
    category: 'learning',
  },
  { text: 'How can I learn to code as a beginner?', category: 'learning' },
  {
    text: 'What are some key skills to learn for the future?',
    category: 'learning',
  },

  // Entertainment
  {
    text: 'Suggest five must-watch movies this year.',
    category: 'entertainment',
  },
  {
    text: 'Tell me a fun fact about a popular TV show.',
    category: 'entertainment',
  },
  {
    text: 'What are the top video games currently trending?',
    category: 'entertainment',
  },
  {
    text: 'Share an interesting fact about a famous actor.',
    category: 'entertainment',
  },
  {
    text: 'What are the most anticipated movies of the year?',
    category: 'entertainment',
  },

  // Health
  {
    text: 'Share tips for maintaining a work-life balance.',
    category: 'health',
  },
  {
    text: 'What are some exercises to improve mental health?',
    category: 'health',
  },
  { text: 'Give me tips for a healthier diet.', category: 'health' },
  {
    text: 'What are some strategies to improve sleep quality?',
    category: 'health',
  },
  {
    text: 'How can I incorporate mindfulness into my daily routine?',
    category: 'health',
  },

  // Travel
  { text: 'Describe a memorable vacation experience.', category: 'travel' },
  { text: 'What are some tips for solo travelers?', category: 'travel' },
  { text: 'Suggest the best places to visit in Europe.', category: 'travel' },
  { text: 'What should I pack for a hiking trip?', category: 'travel' },
  { text: 'How can I travel on a budget?', category: 'travel' },

  // Lifestyle
  {
    text: 'What are some ways to live a more sustainable lifestyle?',
    category: 'lifestyle',
  },
  { text: 'How can I create a better daily routine?', category: 'lifestyle' },
  { text: 'What are the benefits of minimalism?', category: 'lifestyle' },
  { text: 'How can I declutter my home effectively?', category: 'lifestyle' },
  {
    text: 'What are some tips for improving personal hygiene?',
    category: 'lifestyle',
  },

  // Food
  { text: 'Share a recipe for a quick and healthy meal.', category: 'food' },
  { text: 'What are the benefits of a plant-based diet?', category: 'food' },
  { text: 'What are some popular global cuisines to try?', category: 'food' },
  { text: 'How can I meal prep for a busy week?', category: 'food' },
  { text: 'What are some delicious vegetarian dishes?', category: 'food' },

  // Finance
  { text: 'What are some strategies for saving money?', category: 'finance' },
  {
    text: 'How can I start investing in the stock market?',
    category: 'finance',
  },
  {
    text: 'What are the best personal finance management apps?',
    category: 'finance',
  },
  { text: 'How can I create a monthly budget?', category: 'finance' },
  {
    text: 'What are the basics of cryptocurrency investing?',
    category: 'finance',
  },

  // Fashion
  { text: 'What are the latest fashion trends?', category: 'fashion' },
  { text: 'How can I build a versatile wardrobe?', category: 'fashion' },
  { text: 'What are some eco-friendly fashion brands?', category: 'fashion' },
  { text: 'How can I develop my personal style?', category: 'fashion' },
  { text: 'What are some must-have fashion accessories?', category: 'fashion' },

  // Home Improvement
  {
    text: 'What are some DIY home improvement projects?',
    category: 'homeImprovement',
  },
  {
    text: 'How can I organize my living space better?',
    category: 'homeImprovement',
  },
  {
    text: 'What are the best tips for home renovation?',
    category: 'homeImprovement',
  },
  {
    text: 'How can I improve energy efficiency at home?',
    category: 'homeImprovement',
  },
  {
    text: 'What are some budget-friendly home upgrades?',
    category: 'homeImprovement',
  },

  // Environment
  { text: 'What are the benefits of recycling?', category: 'environment' },
  { text: 'How can I reduce my carbon footprint?', category: 'environment' },
  { text: 'What are some sustainable living tips?', category: 'environment' },
  { text: 'What are the effects of climate change?', category: 'environment' },
  { text: 'How can I conserve water at home?', category: 'environment' },

  // Relationships
  {
    text: 'What are some tips for maintaining a healthy relationship?',
    category: 'relationships',
  },
  {
    text: 'How can I improve communication in my relationship?',
    category: 'relationships',
  },
  {
    text: 'What are some fun date ideas for couples?',
    category: 'relationships',
  },
  {
    text: 'How can I handle conflict in relationships?',
    category: 'relationships',
  },
  {
    text: 'What are some ways to build trust in a relationship?',
    category: 'relationships',
  },

  // Self-Improvement
  { text: 'How can I develop better habits?', category: 'selfImprovement' },
  {
    text: 'What are some tips for building self-confidence?',
    category: 'selfImprovement',
  },
  {
    text: 'How can I set and achieve personal goals?',
    category: 'selfImprovement',
  },
  {
    text: 'What are some effective ways to practice gratitude?',
    category: 'selfImprovement',
  },
  {
    text: 'How can I improve my time management skills?',
    category: 'selfImprovement',
  },

  // Events
  {
    text: 'What are some ideas for hosting a memorable party?',
    category: 'events',
  },
  { text: 'How can I plan a successful corporate event?', category: 'events' },
  { text: 'What are some fun outdoor event ideas?', category: 'events' },
  { text: 'How can I create a themed event on a budget?', category: 'events' },
  { text: 'What are the latest event trends?', category: 'events' },
];

const categories = {
  trivia: [
    { class: 'fas fa-question-circle', color: '#F44336' },
    { class: 'fas fa-lightbulb', color: '#FFC107' },
    { class: 'fas fa-star', color: '#FF9800' },
    { class: 'fas fa-trophy', color: '#FF5722' },
    { class: 'fas fa-calendar', color: '#03A9F4' },
  ],
  questions: [
    { class: 'fas fa-question', color: '#F44336' },
    { class: 'fas fa-search', color: '#03A9F4' },
    { class: 'fas fa-info-circle', color: '#FF9800' },
    { class: 'fas fa-question-circle', color: '#FF5722' },
    { class: 'fas fa-comment-dots', color: '#4CAF50' },
  ],
  story: [
    { class: 'fas fa-book', color: '#FF5722' },
    { class: 'fas fa-feather', color: '#FFC107' },
    { class: 'fas fa-paint-brush', color: '#FF9800' },
    { class: 'fas fa-scroll', color: '#FF5722' },
    { class: 'fas fa-theater-masks', color: '#03A9F4' },
  ],
  tips: [
    { class: 'fas fa-lightbulb', color: '#FFC107' },
    { class: 'fas fa-tools', color: '#FF5722' },
    { class: 'fas fa-handshake', color: '#4CAF50' },
    { class: 'fas fa-calendar-check', color: '#FF9800' },
    { class: 'fas fa-cogs', color: '#03A9F4' },
  ],
  tech: [
    { class: 'fas fa-cogs', color: '#03A9F4' },
    { class: 'fas fa-laptop-code', color: '#4CAF50' },
    { class: 'fas fa-network-wired', color: '#FF5722' },
    { class: 'fas fa-cloud', color: '#FF9800' },
    { class: 'fas fa-server', color: '#F44336' },
  ],
  development: [
    { class: 'fas fa-code', color: '#03A9F4' },
    { class: 'fas fa-terminal', color: '#4CAF50' },
    { class: 'fas fa-database', color: '#FF5722' },
    { class: 'fas fa-rocket', color: '#FF9800' },
    { class: 'fas fa-puzzle-piece', color: '#FF5722' },
  ],
  inspiration: [
    { class: 'fas fa-lightbulb', color: '#FFC107' },
    { class: 'fas fa-sun', color: '#FF9800' },
    { class: 'fas fa-star', color: '#FF5722' },
    { class: 'fas fa-heart', color: '#F44336' },
    { class: 'fas fa-quote-left', color: '#03A9F4' },
  ],
  learning: [
    { class: 'fas fa-book-open', color: '#FF5722' },
    { class: 'fas fa-chalkboard-teacher', color: '#FFC107' },
    { class: 'fas fa-laptop', color: '#03A9F4' },
    { class: 'fas fa-graduation-cap', color: '#4CAF50' },
    { class: 'fas fa-lightbulb', color: '#FF9800' },
  ],
  entertainment: [
    { class: 'fas fa-film', color: '#FF5722' },
    { class: 'fas fa-music', color: '#FFC107' },
    { class: 'fas fa-gamepad', color: '#FF9800' },
    { class: 'fas fa-tv', color: '#03A9F4' },
    { class: 'fas fa-palette', color: '#4CAF50' },
  ],
  health: [
    { class: 'fas fa-heartbeat', color: '#F44336' },
    { class: 'fas fa-apple-alt', color: '#4CAF50' },
    { class: 'fas fa-hospital', color: '#03A9F4' },
    { class: 'fas fa-stethoscope', color: '#FF9800' },
    { class: 'fas fa-medkit', color: '#FF5722' },
  ],
  productivity: [
    { class: 'fas fa-calendar-check', color: '#FF9800' },
    { class: 'fas fa-tachometer-alt', color: '#03A9F4' },
    { class: 'fas fa-clipboard-list', color: '#4CAF50' },
    { class: 'fas fa-hourglass-half', color: '#FF5722' },
    { class: 'fas fa-lightbulb', color: '#FFC107' },
  ],
  travel: [
    { class: 'fas fa-plane', color: '#03A9F4' },
    { class: 'fas fa-map-marker-alt', color: '#FF5722' },
    { class: 'fas fa-suitcase', color: '#FFC107' },
    { class: 'fas fa-passport', color: '#FF9800' },
    { class: 'fas fa-globe-americas', color: '#4CAF50' },
  ],
  lifestyle: [
    { class: 'fas fa-home', color: '#FF9800' },
    { class: 'fas fa-bed', color: '#FFC107' },
    { class: 'fas fa-couch', color: '#FF5722' },
    { class: 'fas fa-tree', color: '#4CAF50' },
    { class: 'fas fa-bicycle', color: '#03A9F4' },
  ],
  food: [
    { class: 'fas fa-utensils', color: '#FFC107' },
    { class: 'fas fa-hamburger', color: '#FF9800' },
    { class: 'fas fa-pizza-slice', color: '#FF5722' },
    { class: 'fas fa-apple-alt', color: '#4CAF50' },
    { class: 'fas fa-coffee', color: '#03A9F4' },
  ],
  finance: [
    { class: 'fas fa-dollar-sign', color: '#4CAF50' },
    { class: 'fas fa-chart-line', color: '#03A9F4' },
    { class: 'fas fa-wallet', color: '#FF9800' },
    { class: 'fas fa-piggy-bank', color: '#FF5722' },
    { class: 'fas fa-credit-card', color: '#FFC107' },
  ],
  fashion: [
    { class: 'fas fa-tshirt', color: '#FF5722' },
    { class: 'fas fa-shoe-prints', color: '#FFC107' },
    { class: 'fas fa-hat-cowboy', color: '#FF9800' },
    { class: 'fas fa-ring', color: '#03A9F4' },
    { class: 'fas fa-glasses', color: '#4CAF50' },
  ],
  homeImprovement: [
    { class: 'fas fa-hammer', color: '#FF5722' },
    { class: 'fas fa-wrench', color: '#FFC107' },
    { class: 'fas fa-paint-roller', color: '#FF9800' },
    { class: 'fas fa-screwdriver', color: '#03A9F4' },
    { class: 'fas fa-brush', color: '#4CAF50' },
  ],
  environment: [
    { class: 'fas fa-leaf', color: '#4CAF50' },
    { class: 'fas fa-recycle', color: '#03A9F4' },
    { class: 'fas fa-tree', color: '#FF9800' },
    { class: 'fas fa-water', color: '#03A9F4' },
    { class: 'fas fa-sun', color: '#FFC107' },
  ],
  relationships: [
    { class: 'fas fa-heart', color: '#F44336' },
    { class: 'fas fa-handshake', color: '#4CAF50' },
    { class: 'fas fa-user-friends', color: '#03A9F4' },
    { class: 'fas fa-users', color: '#FF9800' },
    { class: 'fas fa-comments', color: '#FF5722' },
  ],
  selfImprovement: [
    { class: 'fas fa-rocket', color: '#FF5722' },
    { class: 'fas fa-lightbulb', color: '#FFC107' },
    { class: 'fas fa-trophy', color: '#FF9800' },
    { class: 'fas fa-heart', color: '#F44336' },
    { class: 'fas fa-chalkboard-teacher', color: '#4CAF50' },
  ],
  events: [
    { class: 'fas fa-calendar-alt', color: '#03A9F4' },
    { class: 'fas fa-gift', color: '#FF9800' },
    { class: 'fas fa-tickets', color: '#FF5722' },
    { class: 'fas fa-birthday-cake', color: '#FFC107' },
    { class: 'fas fa-calendar-check', color: '#FF9800' },
  ],
};

// TODO: Fix Some Minor Bugs
